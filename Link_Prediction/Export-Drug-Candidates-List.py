#Generation of undocumented Drug-Disease, Drug-Gene or Drug-Phenotype Indication Predictions as a ranked list,
#based on interesting disease, gene or phenotype CUIs, respectively.
#Optional application of underasampling to address class imbalance. 

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from collections import Counter
from imblearn.under_sampling import RandomUnderSampler
from numpy import mean
from numpy import std

def main():
    data = pd.read_csv("features.csv")

   #Model training
    feature_cols=["nod1_aapp", "nod1_acab", "nod1_acty", "nod1_aggp", "nod1_amas", "nod1_amph", "nod1_anab", "nod1_anim", "nod1_anst", "nod1_antb", "nod1_arch", "nod1_bacs", "nod1_bact", "nod1_bdsu", "nod1_bdsy", "nod1_bhvr", "nod1_biof", "nod1_bird", "nod1_blor", "nod1_bmod", "nod1_bodm", "nod1_bpoc", "nod1_bsoj", "nod1_celc", "nod1_celf", "nod1_cell", "nod1_cgab", "nod1_chem", "nod1_chvf", "nod1_chvs", "nod1_clas", "nod1_clna", "nod1_clnd", "nod1_cnce", "nod1_comd", "nod1_crbs", "nod1_diap", "nod1_dora", "nod1_drdd", "nod1_dsyn", "nod1_edac", "nod1_eehu", "nod1_elii", "nod1_emod", "nod1_emst", "nod1_enty", "nod1_enzy", "nod1_euka", "nod1_evnt", "nod1_famg", "nod1_ffas", "nod1_fish", "nod1_fndg", "nod1_fngs", "nod1_food", "nod1_ftcn", "nod1_genf", "nod1_geoa", "nod1_gngm", "nod1_gora", "nod1_grpa", "nod1_grup", "nod1_hcpp", "nod1_hcro", "nod1_hlca", "nod1_hops", "nod1_horm", "nod1_humn", "nod1_idcn", "nod1_imft", "nod1_inbe", "nod1_inch", "nod1_inpo", "nod1_inpr", "nod1_irda", "nod1_lang", "nod1_lbpr", "nod1_lbtr", "nod1_mamm", "nod1_mbrt", "nod1_mcha", "nod1_medd", "nod1_menp", "nod1_mnob", "nod1_mobd", "nod1_moft", "nod1_mosq", "nod1_neop", "nod1_nnon", "nod1_npop", "nod1_nusq", "nod1_ocac", "nod1_ocdi", "nod1_orch", "nod1_orga", "nod1_orgf", "nod1_orgm", "nod1_orgt", "nod1_ortf", "nod1_patf", "nod1_phob", "nod1_phpr", "nod1_phsf", "nod1_phsu", "nod1_plnt", "nod1_podg", "nod1_popg", "nod1_prog", "nod1_pros", "nod1_qlco", "nod1_qnco", "nod1_rcpt", "nod1_rept", "nod1_resa", "nod1_resd", "nod1_rnlw", "nod1_sbst", "nod1_shro", "nod1_socb", "nod1_sosy", "nod1_spco", "nod1_tisu", "nod1_tmco", "nod1_topp", "nod1_virs", "nod1_vita", "nod1_vtbt", "rel1_ADMINISTERED_TO", "rel1_AFFECTS", "rel1_ASSOCIATED_WITH", "rel1_AUGMENTS", "rel1_CAUSES", "rel1_COEXISTS_WITH", "rel1_compared_with", "rel1_COMPLICATES", "rel1_CONVERTS_TO", "rel1_DIAGNOSES", "rel1_different_from", "rel1_different_than", "rel1_DISRUPTS", "rel1_higher_than", "rel1_INHIBITS", "rel1_INTERACTS_WITH", "rel1_IS_A", "rel1_ISA", "rel1_LOCATION_OF", "rel1_lower_than", "rel1_MANIFESTATION_OF", "rel1_METHOD_OF", "rel1_OCCURS_IN", "rel1_PART_OF", "rel1_PRECEDES", "rel1_PREDISPOSES", "rel1_PREVENTS", "rel1_PROCESS_OF", "rel1_PRODUCES", "rel1_same_as", "rel1_STIMULATES", "rel1_TREATS", "rel1_USES", "rel1_MENTIONED_IN", "rel1_HAS_MESH", "nod2_aapp", "nod2_acab", "nod2_acty", "nod2_aggp", "nod2_amas", "nod2_amph", "nod2_anab", "nod2_anim", "nod2_anst", "nod2_antb", "nod2_arch", "nod2_bacs", "nod2_bact", "nod2_bdsu", "nod2_bdsy", "nod2_bhvr", "nod2_biof", "nod2_bird", "nod2_blor", "nod2_bmod", "nod2_bodm", "nod2_bpoc", "nod2_bsoj", "nod2_celc", "nod2_celf", "nod2_cell", "nod2_cgab", "nod2_chem", "nod2_chvf", "nod2_chvs", "nod2_clas", "nod2_clna", "nod2_clnd", "nod2_cnce", "nod2_comd", "nod2_crbs", "nod2_diap", "nod2_dora", "nod2_drdd", "nod2_dsyn", "nod2_edac", "nod2_eehu", "nod2_elii", "nod2_emod", "nod2_emst", "nod2_enty", "nod2_enzy", "nod2_euka", "nod2_evnt", "nod2_famg", "nod2_ffas", "nod2_fish", "nod2_fndg", "nod2_fngs", "nod2_food", "nod2_ftcn", "nod2_genf", "nod2_geoa", "nod2_gngm", "nod2_gora", "nod2_grpa", "nod2_grup", "nod2_hcpp", "nod2_hcro", "nod2_hlca", "nod2_hops", "nod2_horm", "nod2_humn", "nod2_idcn", "nod2_imft", "nod2_inbe", "nod2_inch", "nod2_inpo", "nod2_inpr", "nod2_irda", "nod2_lang", "nod2_lbpr", "nod2_lbtr", "nod2_mamm", "nod2_mbrt", "nod2_mcha", "nod2_medd", "nod2_menp", "nod2_mnob", "nod2_mobd", "nod2_moft", "nod2_mosq", "nod2_neop", "nod2_nnon", "nod2_npop", "nod2_nusq", "nod2_ocac", "nod2_ocdi", "nod2_orch", "nod2_orga", "nod2_orgf", "nod2_orgm", "nod2_orgt", "nod2_ortf", "nod2_patf", "nod2_phob", "nod2_phpr", "nod2_phsf", "nod2_phsu", "nod2_plnt", "nod2_podg", "nod2_popg", "nod2_prog", "nod2_pros", "nod2_qlco", "nod2_qnco", "nod2_rcpt", "nod2_rept", "nod2_resa", "nod2_resd", "nod2_rnlw", "nod2_sbst", "nod2_shro", "nod2_socb", "nod2_sosy", "nod2_spco", "nod2_tisu", "nod2_tmco", "nod2_topp", "nod2_virs", "nod2_vita", "nod2_vtbt", "rel2_ADMINISTERED_TO", "rel2_AFFECTS", "rel2_ASSOCIATED_WITH", "rel2_AUGMENTS", "rel2_CAUSES", "rel2_COEXISTS_WITH", "rel2_compared_with", "rel2_COMPLICATES", "rel2_CONVERTS_TO", "rel2_DIAGNOSES", "rel2_different_from", "rel2_different_than", "rel2_DISRUPTS", "rel2_higher_than", "rel2_INHIBITS", "rel2_INTERACTS_WITH", "rel2_IS_A", "rel2_ISA", "rel2_LOCATION_OF", "rel2_lower_than", "rel2_MANIFESTATION_OF", "rel2_METHOD_OF", "rel2_OCCURS_IN", "rel2_PART_OF", "rel2_PRECEDES", "rel2_PREDISPOSES", "rel2_PREVENTS", "rel2_PROCESS_OF", "rel2_PRODUCES", "rel2_same_as", "rel2_STIMULATES", "rel2_TREATS", "rel2_USES", "rel2_MENTIONED_IN", "rel2_HAS_MESH", "nod3_aapp", "nod3_acab", "nod3_acty", "nod3_aggp", "nod3_amas", "nod3_amph", "nod3_anab", "nod3_anim", "nod3_anst", "nod3_antb", "nod3_arch", "nod3_bacs", "nod3_bact", "nod3_bdsu", "nod3_bdsy", "nod3_bhvr", "nod3_biof", "nod3_bird", "nod3_blor", "nod3_bmod", "nod3_bodm", "nod3_bpoc", "nod3_bsoj", "nod3_celc", "nod3_celf", "nod3_cell", "nod3_cgab", "nod3_chem", "nod3_chvf", "nod3_chvs", "nod3_clas", "nod3_clna", "nod3_clnd", "nod3_cnce", "nod3_comd", "nod3_crbs", "nod3_diap", "nod3_dora", "nod3_drdd", "nod3_dsyn", "nod3_edac", "nod3_eehu", "nod3_elii", "nod3_emod", "nod3_emst", "nod3_enty", "nod3_enzy", "nod3_euka", "nod3_evnt", "nod3_famg", "nod3_ffas", "nod3_fish", "nod3_fndg", "nod3_fngs", "nod3_food", "nod3_ftcn", "nod3_genf", "nod3_geoa", "nod3_gngm", "nod3_gora", "nod3_grpa", "nod3_grup", "nod3_hcpp", "nod3_hcro", "nod3_hlca", "nod3_hops", "nod3_horm", "nod3_humn", "nod3_idcn", "nod3_imft", "nod3_inbe", "nod3_inch", "nod3_inpo", "nod3_inpr", "nod3_irda", "nod3_lang", "nod3_lbpr", "nod3_lbtr", "nod3_mamm", "nod3_mbrt", "nod3_mcha", "nod3_medd", "nod3_menp", "nod3_mnob", "nod3_mobd", "nod3_moft", "nod3_mosq", "nod3_neop", "nod3_nnon", "nod3_npop", "nod3_nusq", "nod3_ocac", "nod3_ocdi", "nod3_orch", "nod3_orga", "nod3_orgf", "nod3_orgm", "nod3_orgt", "nod3_ortf", "nod3_patf", "nod3_phob", "nod3_phpr", "nod3_phsf", "nod3_phsu", "nod3_plnt", "nod3_podg", "nod3_popg", "nod3_prog", "nod3_pros", "nod3_qlco", "nod3_qnco", "nod3_rcpt", "nod3_rept", "nod3_resa", "nod3_resd", "nod3_rnlw", "nod3_sbst", "nod3_shro", "nod3_socb", "nod3_sosy", "nod3_spco", "nod3_tisu", "nod3_tmco", "nod3_topp", "nod3_virs", "nod3_vita", "nod3_vtbt", "rel3_ADMINISTERED_TO", "rel3_AFFECTS", "rel3_ASSOCIATED_WITH", "rel3_AUGMENTS", "rel3_CAUSES", "rel3_COEXISTS_WITH", "rel3_compared_with", "rel3_COMPLICATES", "rel3_CONVERTS_TO", "rel3_DIAGNOSES", "rel3_different_from", "rel3_different_than", "rel3_DISRUPTS", "rel3_higher_than", "rel3_INHIBITS", "rel3_INTERACTS_WITH", "rel3_IS_A", "rel3_ISA", "rel3_LOCATION_OF", "rel3_lower_than", "rel3_MANIFESTATION_OF", "rel3_METHOD_OF", "rel3_OCCURS_IN", "rel3_PART_OF", "rel3_PRECEDES", "rel3_PREDISPOSES", "rel3_PREVENTS", "rel3_PROCESS_OF", "rel3_PRODUCES", "rel3_same_as", "rel3_STIMULATES", "rel3_TREATS", "rel3_USES", "rel3_MENTIONED_IN", "rel3_HAS_MESH"]

    X=data[feature_cols]
    y=data["GROUNDTRUTH"]

   # create model
    print('create model...')
   #Create a RF Classifier
    model=RandomForestClassifier(n_estimators=100)

   #Applies undersampling for negative samples {Uncomment in case of imbalanced data and modify properly}
#   undersample = RandomUnderSampler(sampling_strategy=0.1)
#   X_under, y_under = undersample.fit_resample(X, y)
#   print(' Pos Neg samples ratio: ',Counter(y_under))
#   print('Creating RF model with training data.')

    #Create model
    model = RandomForestClassifier(n_estimators=100)
    # train model
    #model.fit(X_under, y_under) #{Uncomment in case of undersampling negative samples}
    model.fit(X, y)


    mask = data['GROUNDTRUTH'] == 1
    data = data[~mask]

    dataI = data.set_index("Drug_Target")
    X_test=dataI[feature_cols]
    y_test=dataI["GROUNDTRUTH"]
    print('test samples groundtruth (all must be 0): ',Counter(y_test))
    L_test=y_test.index.tolist()
   
   
    print('get predictions for all test CUIs...')
    y_pred = {}
    i=0
    
#Here we must check ONLY pairs that include interesting syndrome/gene/phenotype CUIs.

#Interesting syndrome CUIs: "C0024408", "C0023264", "C0268467", "C0268631", "C1849508", "C0268595", "C0349653 ,C0043459", "C3553947", "C3250443,C0027126", "C0751882"

#Interesting gene CUis ('C1538301', 'C1415012', 'C1412339', 'C1415009', 'C1417647', 'C1420527', 'C1412691', 'C1418674', 'C1418469', 'C1418470', 'C1414085', 'C3469975', 'C1420150')
    
    #Here interesting phenotype CUIs were selected.
    for pair in L_test:
        #Replace between available CUIs {syndrome CUIS, gene CUIs or phenotype CUIs}
        for cui in {'C0205329', 'C1864985', 'C0233565', 'C5574666', 'C0013421', 'C0393593', 'C1866753', 'C1848736', 'C0262404', 'C0740279', 'C4020873', 'C0159104', 'C0026837', 'C0037763', 'C0007758', 'C0015644', 'C0013363', 'C1843663', 'C1862359', 'C5676637', 'C0600498', 'C0011168', 'C0012569', 'C0427190', 'C0242422', 'C0034935', 'C1295585', 'C1847117', 'C0013362', 'C0017639', 'C0393525', 'C1397014', 'C1843921', 'C4703374', 'C0750937', 'C0015371', 'C0234133', 'C0150055', 'C0497327', 'C0005745', 'C0015399', 'C1408507', 'C0015300', 'C1837760', 'C1848490', 'C1862425', 'C1836392', 'C1866751', 'C0558845', 'C0026838', 'C0443147', 'C0162292', 'C0162674', 'C0028738', 'C0023012', 'C0233715', 'C0241210', 'C0454644', 'C0151889', 'C0233844', 'C0234958', 'C0270948', 'C0541794', 'C1843479', 'C0234132', 'C0042928', 'C0086523', 'C1843865', 'C0005904', 'C1832160', 'C0494475', 'C0023380', 'C1836038', 'C0038379', 'C0026827', 'C1842364', 'C5539400', 'C1848924', 'C1859896', 'C0006114', 'C1527311', 'C1844947', 'C1858430', 'C0151786', 'C0023520', 'C1850069', 'C0424551', 'C0268630', 'C1839424', 'C1849489', 'C0700078', 'C4551563', 'C3275417', 'C1839323', 'C3697248', 'C3149083', 'C4020738', 'C0270612', 'C0557874', 'C1864897', 'C4020875', 'C2677650', 'C4020739', 'C0013384', 'C4024725', 'C0018784', 'C0441748', 'C4020899', 'C0010520', 'C0848558', 'C0003578', 'C0009421', 'C3887709', 'C0423109', 'C0085605', 'C0238044', 'C0019209', 'C5397670', 'C1865351', 'C4024926', 'C0231246', 'C2315100', 'C4531021', 'C1445953', 'C0271215', 'C0456909', 'C0887941', 'C2674608', 'C0020615', 'C4025585', 'C1145670', 'C0239548', 'C0038002', 'C0001125', 'C0347959', 'C1836550', 'C1836830', 'C1850493', 'C1855009', 'C1855019', 'C1855996', 'C1857121', 'C1859678', 'C0042963', 'C1167918', 'C0035229', 'C4020855', 'C4022744', 'C0007194', 'C4020730', 'C1806780', 'C0554970', 'C0151686', 'C0456070', 'C0878787', 'C1837385', 'C3552463', 'C1839436', 'C1855020', 'C1836440', 'C4732918', 'C1860834', 'C5826351', 'C0026650', 'C0029131', 'C0029089', 'C0029124', 'C0020555', 'C4732731', 'C1854838', 'C1504405', 'C1839042', 'C1839888', 'C0427086', 'C1858857', 'C3151953', 'C1835995', 'C3276441', 'C4024609', 'C0232466', 'C4022770', 'C4022762', 'C4022749', 'C4022748', 'C4022745', 'C3277428', 'C4022148', 'C2711610', 'C4021790', 'C0014544', 'C0036572', 'C0023882', 'C0085583', 'C0234967', 'C0175754', 'C0018801', 'C0018802', 'C0264716', 'C0002871', 'C0162119', 'C4703372', 'C0220982', 'C0008489', 'C4020858', 'C0344482', 'C0004158', 'C0427065', 'C1864696', 'C3887506', 'C0684276', 'C0028968', 'C1837388', 'C0158118', 'C1847868', 'C0026848', 'C1865353', 'C1842587', 'C1970883', 'C3696376', 'C4020800', 'C0031117', 'C0442874', 'C1855119', 'C2750913', 'C4703644', 'C0027726', 'C0151747', 'C0268709', 'C0239676', 'C0152421', 'C0554972', 'C1850189', 'C0086543', 'C1510497', 'C0013595', 'C0015934', 'C0021296', 'C0002170', 'C0018818', 'C0853697', 'C0001126', 'C0266617', 'C0424503', 'C1385263', 'C4072832', 'C4072833', 'C0038220', 'C1836923', 'C1855008', 'C4024705', 'C1839830', 'C3887898', 'C0014068', 'C1839630', 'C1858120', 'C2700617', 'C5139608', 'C1855106', 'C0497202', 'C0013132', 'C0037036', 'C1837142', 'C1838391', 'C3714772', 'C0751435', 'C1846149', 'C0040822', 'C0234379', 'C0586392', 'C1853394', 'C0751837', 'C0268464', 'C1837352', 'C0040485', 'C0152116', 'C0520966', 'C0154676', 'C0036439', 'C0009081', 'C0039273', 'C0728829', 'C0151564', 'C0234378', 'C0234979', 'C3552908', 'C1846868', 'C5442007', 'C1853767', 'C4021758', 'C0751778', 'C4021759', 'C4316903', 'C4703619', 'C5139405', 'C5139406', 'C5139407', 'C1854301', 'C4020874', 'C0018524', 'C0235153', 'C0001807', 'C0424323', 'C3554568', 'C0003467', 'C4020884', 'C0004352', 'C0424295', 'C0025362', 'C0423903', 'C0917816', 'C1843367', 'C3714756', 'C4020876', 'C5139403', 'C4025588', 'C0151611', 'C0033975', 'C0004930', 'C0004941', 'C0233514', 'C0542299', 'C0085271', 'C0424366', 'C1848971', 'C4021768', 'C1969156', 'C5706192', 'C0020255', 'C0234535', 'C0015930', 'C4281993', 'C1849510', 'C0751495', 'C4021217', 'C4023510', 'C4022738', 'C5397594', 'C0549400', 'C0234853', 'C3887611', 'C3278923', 'C1853377', 'C3164501', 'C0270846', 'C4476550', 'C4021219', 'C0037769', 'C1527366', 'C4023501', 'C4023476', 'C4023475', 'C0426209', 'C0154671', 'C4551584', 'C1846151', 'C0004045', 'C0085584', 'C1306587', 'C0560046', 'C4025603', 'C0235430', 'C0268594', 'C5826565', 'C0162275', 'C0018946', 'C0022638', 'C4024972', 'C1856408', 'C2243051', 'C4255213', 'C4280664', 'C0220981', 'C0151818', 'C1856409', 'C0235946', 'C4020860', 'C0746940', 'C1854882', 'C5826590', 'C4020921', 'C5539595', 'C4520981', 'C0009451', 'C1848453', 'C0018681', 'C4025711', 'C0393577', 'C1968958', 'C4022743', 'C4732790', 'C4083076', 'C2675973', 'C0035317', 'C0012691', 'C4018871', 'C0012833', 'C0042571', 'C0751093', 'C0948163', 'C4020851', 'C0271708', 'C0041657', 'C0338656', 'C0683322', 'C0748318', 'C1561643', 'C0025322', 'C0836924', 'C0857460', 'C0333068', 'C0239981', 'C0860864', 'C0015523', 'C4317093', 'C1837260', 'C1867446', 'C4551734', 'C1839603', 'C0035334', 'C4551714', 'C4520847', 'C5234937', 'C1837899', 'C0234533', 'C0033687', 'C0013604', 'C0268000', 'C1859347', 'C0272375', 'C4024780', 'C0014877', 'C0031039', 'C2711227', 'C1836142', 'C0234162', 'C4703369', 'C4703370', 'C0152025', 'C4721453', 'C0239946', 'C0455988', 'C4020856', 'C4551520', 'C0853225', 'C0948896', 'C0029453', 'C0031046', 'C1865017', 'C0086565', 'C0151766', 'C0235996', 'C0438237', 'C0438717', 'C0877359', 'C1842003', 'C1848701', 'C0240671', 'C1840379', 'C0011991', 'C1859341', 'C0266470', 'C0151718', 'C0266781', 'C0234146', 'C0241772', 'C0278124', 'C0269269', 'C0038238', 'C1836542', 'C3550546', 'C4280495', 'C1843392', 'C0022821', 'C0267456', 'C0554101', 'C1833058', 'C1859541', 'C2677378', 'C4020747', 'C0022679', 'C3887499', 'C0020676', 'C0878544', 'C0162538', 'C1857287', 'C0240635', 'C0024433', 'C1836047', 'C0035353', 'C0678230', 'C0302501', 'C0399526', 'C2227134', 'C4280644', 'C4280645', 'C0020534', 'C1865014', 'C0426415', 'C1400105', 'C4280629', 'C1840077', 'C0029456', 'C1844820', 'C0016202', 'C0264133', 'C0575158', 'C1853743', 'C0023787', 'C1277241', 'C1858091', 'C0271623', 'C3489396', 'C4021826', 'C0857379', 'C1854113', 'C4230640', 'C0027092', 'C0020459', 'C0235986', 'C0021655', 'C5200994', 'C0015967', 'C0476273', 'C0586553', 'C0431718', 'C0241355', 'C0266368', 'C4732745', 'C4023353', 'C4023165', 'C4023159', 'C0032290', 'C4022872', 'C4021060', 'C4022605', 'C4073079', 'C1844704', 'C0024236', 'C0240278', 'C1835229', 'C2931867', 'C0002962', 'C0151699', 'C0149871', 'C0151603', 'C4531146', 'C4280709', 'C0423250', 'C1856661', 'C1857484', 'C0011053', 'C0018772', 'C1384666', 'C0238621', 'C1167670', 'C4020843', 'C0241442', 'C0001925', 'C0424731', 'C0342491', 'C1846223', 'C1833431', 'C1859235', 'C0024421', 'C0013274', 'C0231791', 'C4082169', 'C0239479', 'C1856468', 'C0476397', 'C0431478', 'C1837402', 'C4280482', 'C0541764', 'C4732739', 'C1849300', 'C1837404', 'C1836843', 'C0239234', 'C0020295', 'C1859241', 'C0265783', 'C1865186', 'C1866134', 'C4551583', 'C1328514', 'C1833999', 'C4551715', 'C1856660', 'C0008519', 'C0266491', 'C4048199', 'C1853241', 'C0036857', 'C0241521', 'C1859231', 'C0231686', 'C0850703', 'C1840319', 'C0006157', 'C0022353', 'C1859236', 'C1865877', 'C1303007', 'C4280604', 'C1858085', 'C4280651', 'C1859126', 'C1861866', 'C0240912', 'C0156394', 'C0158465', 'C0010417', 'C0017601', 'C0025990', 'C1857130', 'C4476523', 'C4476524', 'C4476525', 'C0266464', 'C1845123', 'C0023895', 'C0232744', 'C3279149', 'C1839764', 'C1849367', 'C0431384', 'C1837397', 'C1854919', 'C0266483', 'C0410916', 'C1838681', 'C1850776', 'C0022346', 'C1866934', 'C0410528', 'C4280567', 'C0349588', 'C0010038', 'C0521719', 'C3279397', 'C1855773', 'C3553450', 'C3714581', 'C0042798', 'C3665347', 'C4025844', 'C0344531', 'C0546967', 'C0151526', 'C0700639', 'C3714745', 'C1861869', 'C4020777', 'C0878638', 'C1836940', 'C0005779', 'C0019087', 'C1846821', 'C0001403', 'C0405580', 'C3887896', 'C0020224', 'C3888576', 'C0700153', 'C0085614', 'C0004238', 'C4551761', 'C0008350', 'C1864584', 'C4083212', 'C1834433', 'C0156312', 'C1836003', 'C0235659', 'C4703371', 'C0004239', 'C0020619', 'C4025575', 'C0858617', 'C1842820', 'C4022169', 'C0575081', 'C0392188', 'C0520679', 'C0231528', 'C0235475', 'C2215975', 'C1867864', 'C1866141', 'C0600125', 'C0015672', 'C4022591', 'C0427055', 'C4531101', 'C0917799', 'C4073190', 'C0151721', 'C0729353', 'C0240479', 'C0004106', 'C0020490', 'C0085633', 'C0011581', 'C0856975', 'C1510586', 'C0262630', 'C0242350', 'C0011849', 'C0020503', 'C0026106', 'C0234985', 'C0270971', 'C2267233', 'C4025790', 'C1865916', 'C0009806', 'C0237326', 'C4025718', 'C0085639', 'C3806467', 'C0857576', 'C0020443', 'C0595929', 'C0221629', 'C1838869', 'C1843637', 'C0021847', 'C0039240', 'C1698480', 'C4025279', 'C0006009', 'C0234632', 'C1858427', 'C0521532', 'C4020786', 'C4023701', 'C1839767', 'C1850072', 'C1853383', 'C4023628', 'C4023343', 'C1456784', 'C1868623', 'C4022685', 'C4022683', 'C1277187', 'C1295654', 'C4073137', 'C4073139', 'C0267071', 'C5539399', 'C0007193', 'C0007102', 'C0270921', 'C1263857', 'C0427063', 'C0748691', 'C0427064', 'C0007114', 'C0037286', 'C0699893', 'C0346388', 'C0476089', 'C4721610', 'C0006118', 'C3501843', 'C4025671', 'C0947912', 'C1859438', 'C3807025', 'C1301959', 'C4082299', 'C0454555', 'C0566620', 'C3806482', 'C5779613', 'C3806462', 'C0746674', 'C0424585', 'C1837098', 'C1844945', 'C5702564', 'C0520680', 'C0232608', 'C4280747', 'C4022168', 'C0333751', 'C0234860', 'C1527344', 'C0231712', 'C1858025', 'C1858127', 'C4021726', 'C1836450', 'C0038450', 'C0237304', 'C4021066', 'C4280310', 'C0427144', 'C1839546', 'C0158731', 'C0019555', 'C0017168', 'C0018834', 'C4317146', 'C4021757', 'C0162297', 'C0235025', 'C0271683', 'C3809827', 'C4022578'}:
            if cui in pair:
                pairFeatures = X_test.loc[[pair]]
                pred_matrix=model.predict_proba(pairFeatures)
                y_pred[pair]=pred_matrix[0][1]
                i=i+1

   
    print('Top Undocumented Drug-Phenotype Indication Predictions: ')
    from collections import OrderedDict
    sorted_pred=OrderedDict(sorted(y_pred.items(), key=lambda x: x[1], reverse=True))
   

    ##Save all predictions with probability >50% in a file.
    with open('./Drug_Candidates/TOP_PREDICTIONS.txt', 'w') as f:
        for k, v in sorted_pred.items():
            f.write(k+','+ str(v))
            f.write('\n')
            print(k+','+ str(v))
            if v<0.50:
                break

main()
